var documenterSearchIndex = {"docs":
[{"location":"neverworld/#sec:API","page":"API","title":"List of functions in WenoNeverworld","text":"","category":"section"},{"location":"neverworld/","page":"API","title":"API","text":"Modules = [ WenoNeverworld, WenoNeverworld.Diagnostics, WenoNeverworld.Auxiliaries, WenoNeverworld.NeverworldGrids, WenoNeverworld.NeverworldBoundaries, WenoNeverworld.Parameterizations]","category":"page"},{"location":"neverworld/#WenoNeverworld.checkpoint_outputs!-Tuple{Any, Any}","page":"API","title":"WenoNeverworld.checkpoint_outputs!","text":"function checkpoint_outputs!(simulation, output_prefix; overwrite_existing = true, checkpoint_time = 100days)\n\nattaches a Checkpointer to the simulation with prefix output_prefix that is saved every checkpoint_time\t\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.initialize_model!-Tuple{Any, Val{false}, Vararg{Any, 4}}","page":"API","title":"WenoNeverworld.initialize_model!","text":"function initialize_model!(model, Val(interpolate), initial_buoyancy, grid, previous_grid, init_file, buoyancymodel)\n\ninitializes the model according to interpolate or not on a finer/coarser grid Val(interpolate)\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.reduced_outputs!-Tuple{Any, Any}","page":"API","title":"WenoNeverworld.reduced_outputs!","text":"function reduced_outputs!(simulation, output_prefix; overwrite_existing = true, \t\n                                                     checkpoint_time    = 100days,\t\n                                                     snapshot_time      = 30days,\t\n                                                     surface_time       = 1days,\t\n                                                     bottom_time        = 1days)\n\nattaches four JLD2OutputWriters to simulation with prefix output_prefix\t\n\nOutputs attached\n\nsnapshots : snapshots of u, v, w and b saved every snapshot_time\t\nsurface_fields : snapshots of u, v, w and b at the surface saved every surface_time\t\nbottom_fields : snapshots of u, v, w and b at the bottom (k = 2) saved every bottom_time\t\ncheckpointer : checkpointer saved every checkpoint_time\t\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.standard_outputs!-Tuple{Any, Any}","page":"API","title":"WenoNeverworld.standard_outputs!","text":"function standard_outputs!(simulation, output_prefix; overwrite_existing = true, \t\n                                                      checkpoint_time    = 100days,\t\n                                                      snapshot_time      = 30days,\t\n                                                      surface_time       = 5days,\t\n                                                      average_time       = 30days,\t\n                                                      average_window     = average_time,\t    \n                                                      average_stride     = 10)\n\nattaches four JLD2OutputWriters to simulation with prefix output_prefix\t\n\nOutputs attached\n\nsnapshots : snapshots of u, v, w and b saved every snapshot_time\t\nsurface_fields : snapshots of u, v, w and b at the surface saved every surface_time\t\naveraged_fields : averages of u, v, w, b, ζ, ζ2, u2, v2, w2, b2, ub, vb, and wb \t                     saved every average_time with a window of average_window and stride of average_stride\t\ncheckpointer : checkpointer saved every checkpoint_time\t\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.vertically_averaged_outputs!-Tuple{Any, Any}","page":"API","title":"WenoNeverworld.vertically_averaged_outputs!","text":"function vertically_averaged_outputs!(simulation, output_prefix; overwrite_existing = true, \t\n                                                                 average_time       = 30days,\t\n                                                                 average_window     = average_time,\t    \n                                                                 average_stride     = 10)\n\nattaches a JLD2OutputWriters to simulation with prefix output_prefix\t\n\nOutputs attached\n\nvertically_averaged_outputs : average of KE and heat content (integral of temperature in ᵒCm³)\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.weno_neverworld_simulation-Tuple{Any}","page":"API","title":"WenoNeverworld.weno_neverworld_simulation","text":"function weno_neverworld_simulation(grid; \n                                    previous_grid = grid,\n                                    μ_drag = 0.001,  \n                                    convective_adjustment = default_convective_adjustment,\n                                    vertical_diffusivity  = default_vertical_diffusivity,\n                                    horizontal_closure    = nothing,\n                                    coriolis = HydrostaticSphericalCoriolis(scheme = ActiveCellEnstrophyConserving()),\n                                    free_surface = SplitExplicitFreeSurface(; grid, cfl = 0.75),\n                                    momentum_advection = default_momentum_advection(grid.underlying_grid),\n                                    tracer_advection   = WENO(grid.underlying_grid), \n                                    interp_init = false,\n                                    init_file = nothing,\n                                    Δt = 5minutes,\n                                    stop_time = 10years,\n                                    stop_iteration = Inf,\n                                    initial_buoyancy = initial_buoyancy_parabola,\n                                    wind_stress               = WindStressBoundaryCondition(),\n                                    buoyancy_relaxation       = BuoyancyRelaxationBoundaryCondition(),\n                                    tracer_boundary_condition = NamedTuple(),\n                                    tracers = :b\n                                    )\n\nreturns a simulation object for the Neverworld simulation.\n\nArguments:\n\ngrid: the grid on which the simulation is to be run\n\nKeyword arguments:\n\nprevious_grid: the grid on which init_file has been generated, if we restart from init_file\nμ_drag: the drag coefficient for the quadratic bottom drag, default: 0.001\nconvective_adjustment: the convective adjustment scheme, default: RiBasedVerticalDiffusivity()\nvertical_diffusivity: the vertical diffusivity scheme, default: VerticalScalarDiffusivity(ν=1e-4, κ=3e-5)\nhorizontal_closure: the horizontal closure scheme, default: nothing\ncoriolis: the coriolis scheme, default: HydrostaticSphericalCoriolis(scheme = ActiveCellEnstrophyConserving())\nfree_surface: the free surface scheme, default: SplitExplicitFreeSurface(; grid, cfl = 0.75)\nmomentum_advection: the momentum advection scheme, default: VectorInvariant(vorticity_scheme = WENO(order = 9), vertical_scheme = WENO(grid))\ntracer_advection: the tracer advection scheme, default: WENO(grid)\ninterp_init: whether to interpolate the initial conditions from init_file to grid, default: false\ninit_file: the file from which to read the initial conditions, default: nothing\nΔt: the time step, default: 5minutes\nstop_time: the time at which to stop the simulation, default: 10years\nstop_iteration: the iteration at which to stop the simulation, default: Inf\ninitial_buoyancy: the initial buoyancy field in case of init_file = nothing, function of (x, y, z) default: initial_buoyancy_parabola\nwind_stress: the wind stress boundary condition, default: WindStressBoundaryCondition() (see src/neverworld_initial_and_boundary_conditions.jl)\nbuoyancy_relaxation: the buoyancy relaxation boundary condition, default: BuoyancyRelaxationBoundaryCondition() (see src/neverworld_initial_and_boundary_conditions.jl)\ntracer_boundary_condition: boundary conditions for tracers outside :b, default: nothing\ntracers: the tracers to be advected, default: :b   \n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.Diagnostics.AreaField","page":"API","title":"WenoNeverworld.Diagnostics.AreaField","text":"AreaField(grid, loc=(Center, Center, Nothing); indices = default_indices(3))\n\nReturns a two-dimensional field containing the cell horizontal areas at location loc with indices indices.\n\n\n\n\n\n","category":"function"},{"location":"neverworld/#WenoNeverworld.Diagnostics.DeformationRadius-Tuple{Dict, Any}","page":"API","title":"WenoNeverworld.Diagnostics.DeformationRadius","text":"DeformationRadius(f::Dict, i)\n\nReturns the two-dimensional deformation vorticity at time index i.\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.Diagnostics.DensityField-Tuple{Oceananigans.Fields.Field}","page":"API","title":"WenoNeverworld.Diagnostics.DensityField","text":"DensityField(b::Field; ρ₀ = 1000.0, g = 9.80655)\n\nReturns the three-dimensional density given a buoyancy field b.\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.Diagnostics.HeightField","page":"API","title":"WenoNeverworld.Diagnostics.HeightField","text":"HeightField(grid, loc = (Center, Center, Center))\n\nReturns a three-dimensional field containing the cell vertical spacing at location loc.\n\n\n\n\n\n","category":"function"},{"location":"neverworld/#WenoNeverworld.Diagnostics.KineticEnergy-Tuple{Dict, Any}","page":"API","title":"WenoNeverworld.Diagnostics.KineticEnergy","text":"KineticEnergy(f::Dict, i)\n\nReturns the three-dimensional kinetic energy at time index i.\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.Diagnostics.PotentialVorticity-Tuple{Dict, Any}","page":"API","title":"WenoNeverworld.Diagnostics.PotentialVorticity","text":"PotentialVorticity(f::Dict, i)\n\nReturns the three-dimensional potential vorticity at time index i.\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.Diagnostics.Stratification-Tuple{Dict, Any}","page":"API","title":"WenoNeverworld.Diagnostics.Stratification","text":"Stratification(f::Dict, i)\n\nReturns the three-dimensional stratification at time index i.\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.Diagnostics.VerticalVorticity-Tuple{Dict, Any}","page":"API","title":"WenoNeverworld.Diagnostics.VerticalVorticity","text":"VerticalVorticity(f::Dict, i)\n\nReturns the three-dimensional vertical vorticity at time index i.\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.Diagnostics.VolumeField","page":"API","title":"WenoNeverworld.Diagnostics.VolumeField","text":"VolumeField(grid, loc=(Center, Center, Center);  indices = default_indices(3))\n\nReturns a three-dimensional field containing the cell volumes at location loc with indices indices.\n\n\n\n\n\n","category":"function"},{"location":"neverworld/#WenoNeverworld.Diagnostics.add_kinetic_energy_and_vorticity_to_timeseries!-Tuple{Dict}","page":"API","title":"WenoNeverworld.Diagnostics.add_kinetic_energy_and_vorticity_to_timeseries!","text":"adds the kinetic energy and vertical vorticity to an instantaneous timeseries\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.Diagnostics.add_kinetic_energy_to_averaged_timeseries!-Tuple{Dict}","page":"API","title":"WenoNeverworld.Diagnostics.add_kinetic_energy_to_averaged_timeseries!","text":"adds the kinetic energy to a timeseries of values averaged in time. The latter must contains u2 and v2\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.Diagnostics.all_fieldtimeseries","page":"API","title":"WenoNeverworld.Diagnostics.all_fieldtimeseries","text":"all_fieldtimeseries(filename, dir = nothing; variables = (\"u\", \"v\", \"w\", \"b\"), checkpointer = false, number_files = nothing)\n\nLoad and return a dictionary of field time series data.\n\nArguments\n\nfilename: The name of the file containing the field data.\ndir: The directory where the field data files are located. Defaults to \"./\".\nvariables: A tuple of variable names to load. Defaults to (\"u\", \"v\", \"w\", \"b\").\ncheckpointer: A boolean indicating whether to read checkpointers or time series. Defaults to false.\nnumber_files: The number of files to load. Defaults to nothing.\n\nReturns\n\nA dictionary where the keys are symbols representing the variable names and the values are FieldTimeSeries objects.\n\n\n\n\n\n","category":"function"},{"location":"neverworld/#WenoNeverworld.Diagnostics.checkpoint_fields-Tuple{Any}","page":"API","title":"WenoNeverworld.Diagnostics.checkpoint_fields","text":"returns a nametuple of (u, v, w, b) from the data in file\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.Diagnostics.compress_all_restarts-Tuple{Any, Any, Any}","page":"API","title":"WenoNeverworld.Diagnostics.compress_all_restarts","text":"compress_all_restarts(resolution, ranks, dir; output_prefix = \"weno_thirtytwo\", remove_restart = false, leave_last_file = true)\n\nCompresses all restart files in the specified directory.\n\nArguments\n\nresolution: The resolution of the restart files.\nranks: The number of ranks used for the simulations.\ndir: The directory containing the restart files.\n\nKeyword Arguments\n\noutput_prefix: The prefix for the compressed files. Default is \"weno_thirtytwo\".\nremove_restart: Whether to remove the original restart files after compression. Default is false.\nleave_last_file: Whether to leave the last file uncompressed. Default is true.\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.Diagnostics.compress_restart_file","page":"API","title":"WenoNeverworld.Diagnostics.compress_restart_file","text":"compress_restart_file(resolution, ranks, iteration, folder = \"../\")\n\nCompresses the restart files for a given simulation.\n\nArguments\n\nresolution: The resolution of the simulation.\nranks: The number of ranks used in the simulation.\niteration: The iteration of the checkpoint.\nfolder: The folder where the restart files are located. Default is \"../\".\n\nExamples\n\njulia> compress_restart_file(1/32, 8, 0)\n\n\n\n\n\n","category":"function"},{"location":"neverworld/#WenoNeverworld.Diagnostics.integral_available_potential_energy-Tuple{Oceananigans.OutputReaders.FieldTimeSeries}","page":"API","title":"WenoNeverworld.Diagnostics.integral_available_potential_energy","text":"integral_available_potential_energy(b::FieldTimeSeries; stride = 1, start_time = 1, end_time = length(u.times))\n\nCompute the integral available potential energy (APE) over time for a given FieldTimeSeries b.\n\nArguments\n\nb::FieldTimeSeries: The field time series containing bouyancy data.\nstride::Int: The stride value for iterating over the time steps. Default is 1.\nstart_time::Int: The starting time step for integration. Default is 1.\nend_time::Int: The ending time step for integration. Default is the length of u.times.\n\nReturns\n\nenergy::Vector{Float64}: The vector of integrated APE values over time.\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.Diagnostics.integral_kinetic_energy-Tuple{Oceananigans.OutputReaders.FieldTimeSeries, Oceananigans.OutputReaders.FieldTimeSeries}","page":"API","title":"WenoNeverworld.Diagnostics.integral_kinetic_energy","text":"integral_kinetic_energy(u::FieldTimeSeries, v::FieldTimeSeries; stride = 1, start_time = 1, end_time = length(u.times))\n\nCompute the integral kinetic energy over time for the given field time series u and v.\n\nArguments\n\nu::FieldTimeSeries: The field time series for the u-component of the velocity.\nv::FieldTimeSeries: The field time series for the v-component of the velocity.\nstride::Int: The stride between time steps to consider. Default is 1.\nstart_time::Int: The starting time step to consider. Default is 1.\nend_time::Int: The ending time step to consider. Default is the length of u.times.\n\nReturns\n\nenergy::Vector{Float64}: The computed integral of kinetic energy over time.\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.Diagnostics.limit_timeseries!-Tuple{Dict, Any}","page":"API","title":"WenoNeverworld.Diagnostics.limit_timeseries!","text":"limit the timeseries to times\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.Diagnostics.limit_timeseries!-Tuple{Oceananigans.OutputReaders.FieldTimeSeries, Any}","page":"API","title":"WenoNeverworld.Diagnostics.limit_timeseries!","text":"limit the timeseries to times\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.Diagnostics.propagate-Tuple","page":"API","title":"WenoNeverworld.Diagnostics.propagate","text":"propagate(fields...; func)\n\nPropagates the function func with inputs fields... through time.\n\nArguments\n\nfields: The input fields\nfunc: The function to apply to the fields at each time step.\n\nReturns\n\nfield_output: The output of function func as a FieldTimeSeries object.\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.Diagnostics.reduce_output_size!-Tuple{Any, Any}","page":"API","title":"WenoNeverworld.Diagnostics.reduce_output_size!","text":"saves a new file with name new_file_name with the last limit_to timeseries\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.Auxiliaries.continue_downwards!-Tuple{Any}","page":"API","title":"WenoNeverworld.Auxiliaries.continue_downwards!","text":"continue_downwards!(field)\n\ncontinue downwards a field with missing values at field[i, j, k] == 0\n\nthe continue_downwards! implementation is inspired by https://github.com/CliMA/ClimaOcean.jl/pull/60\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.Auxiliaries.cubic_interpolate-Tuple{Any}","page":"API","title":"WenoNeverworld.Auxiliaries.cubic_interpolate","text":"function cubic_interpolate(x, x1, x2, y1, y2, d1, d2)\n\nreturns a cubic function between points (x1, y1) and (x2, y2) with derivative d1 and d2\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.Auxiliaries.exponential_profile-Tuple{Any}","page":"API","title":"WenoNeverworld.Auxiliaries.exponential_profile","text":"utility profiles (atan, exponential, and parabolic) \n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.Auxiliaries.increase_simulation_Δt!-Tuple{Any}","page":"API","title":"WenoNeverworld.Auxiliaries.increase_simulation_Δt!","text":"function increase_simulation_Δt!(simulation; cutoff_time = 20days, new_Δt = 2minutes)\n\nutility to update the Δt of a simulation after a certain cutoff_time with new_Δt.\t Note: this function adds a callback to simulation, so the order of increase_simulation_Δt! \t matters (i.e. the Δt will be updated based on the order of increase_simulation_Δt! specified)\t\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.Auxiliaries.propagate_horizontally!-Tuple{Any}","page":"API","title":"WenoNeverworld.Auxiliaries.propagate_horizontally!","text":"propagate_horizontally!(field; max_iter = Inf)\n\npropagate horizontally a field with missing values at field[i, j, k] == 0\n\ndisclaimer: the propagate_horizontally! implementation is inspired by https://github.com/CliMA/ClimaOcean.jl/pull/60\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.Auxiliaries.regrid_field-NTuple{4, Any}","page":"API","title":"WenoNeverworld.Auxiliaries.regrid_field","text":"function regridded_field(old_vector, old_grid, new_grid, loc)\n\ninterpolate old_vector (living on loc) from old_grid to new_grid \t\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.Auxiliaries.update_simulation_clock!-Tuple{Any, Any}","page":"API","title":"WenoNeverworld.Auxiliaries.update_simulation_clock!","text":"function update_simulation_clock!(simulation, init_file)\n\nupdates the clock of simulation with the time in init_file\t\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.NeverworldGrids.NeverworldGrid","page":"API","title":"WenoNeverworld.NeverworldGrids.NeverworldGrid","text":"function NeverworldGrid(arch, degree, FT::DataType = Float64; H = 7, longitude = (-2, 62), latitude = (-70, 0), bathymetry_params = NeverWorldBathymetryParameters(), longitudinal_extent = 60)\n\nbuilds a LatitudeLongitudeGrid with a specified bathymetry\n\nArguments\n\narch : architecture of the grid, can be CPU() or GPU() or Distributed\nresolution : resolution in degrees.\nFT : (optional) floating point precision (default = Float64)\n\nKeyword Arguments\n\nH : halo size, Int\nlongitudinal_extent : size of the actual domain in longitudinal direction, Number\nlongitude : longitudinal extremes of the domain, Tuple. Note: this keyword must be at least longitude_extent + resolution * 2H               to allow for correct advection stencils \nlatitude : latitudinal extremes of the domain\nbathymetry_params : parameters for the neverworld bathymetry, see neverworld_bathymetry.jl\nz_faces : array containing the z faces\n\n\n\n\n\n","category":"function"},{"location":"neverworld/#WenoNeverworld.NeverworldGrids.bottom_ridge_xy-Tuple{Any, Any, Nothing, Any}","page":"API","title":"WenoNeverworld.NeverworldGrids.bottom_ridge_xy","text":"smoothed coasts for the inlet and outlet of the channel \n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.NeverworldGrids.exponential_z_faces-Tuple{}","page":"API","title":"WenoNeverworld.NeverworldGrids.exponential_z_faces","text":"function exponential_z_faces(; Nz = 69, Lz = 4000.0, e_folding = 0.06704463421863584)\n\ngenerates an array of exponential z faces \n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.NeverworldBoundaries.BuoyancyRelaxationBoundaryCondition","page":"API","title":"WenoNeverworld.NeverworldBoundaries.BuoyancyRelaxationBoundaryCondition","text":"BuoyancyRelaxationBoundaryCondition(func = (y, t) -> parabolic_scaling(y); ΔB = ΔB, λ = 7days)\n\nBuoyancy relaxation profile which implements a latitude-time dependent boundary condition following: \n\nb = Δz_surface / λ * (b_surf - ΔB * func(φ, t))\n\nArguments:\n\nfunc: function which takes the latitude φ and time t and returns a scalar\n\nKeyword arguments:\n\nΔB: buoyancy difference between the equator and the poles, default: 6.0e-2\nλ: restoring time-scale, default: 7days\n\n\n\n\n\n","category":"type"},{"location":"neverworld/#WenoNeverworld.NeverworldBoundaries.WindStressBoundaryCondition-Tuple{}","page":"API","title":"WenoNeverworld.NeverworldBoundaries.WindStressBoundaryCondition","text":"WindStressBoundaryCondition(; φs = default_φs, τs = default_τs)\n\nWind stess boundary condition which implements a piecewise cubic interpolation between points φs (Tuple) and τs (Tuple).\n\n\n\n\n\n","category":"method"},{"location":"neverworld/#WenoNeverworld.Parameterizations.EnergyBackScattering","page":"API","title":"WenoNeverworld.Parameterizations.EnergyBackScattering","text":"struct EnergyBackScattering{FT} <: AbstractTurbulenceClosure{ExplicitTimeDiscretization, 3}\n\nEnergy backscattering turbulence closure model. This struct represents a turbulence closure model based on the energy backscattering principle.  It is a parameterization of the turbulent momentum flux in a fluid flow.  The model is implemented as a struct with a type parameter FT representing the floating-point type used for calculations.\n\nArguments\n\nν::FT: The kinematic anti-viscosity of the fluid.\n\nreference: Zanna, L., Bolton, T. (2020).  Data-driven equation discovery of ocean mesoscale closures.  Geophysical Research Letters, 47, e2020GL088376. https://doi.org/10.1029/2020GL088376\n\n\n\n\n\n","category":"type"},{"location":"neverworld/#WenoNeverworld.Parameterizations.QGLeith","page":"API","title":"WenoNeverworld.Parameterizations.QGLeith","text":"struct QGLeith{FT, M, S} <: AbstractScalarDiffusivity{ExplicitTimeDiscretization, HorizontalFormulation, 2}\n\nQGLeith is a struct representing the Leith scalar diffusivity parameterization for quasi-geostrophic models.\n\nFields\n\nC: The coefficient for the diffusivity parameterization.\nmin_N²: The minimum value for the squared buoyancy frequency.\nisopycnal_tensor: The isopycnal tensor model used for the diffusivity calculation.\nslope_limiter: The slope limiter used for the diffusivity calculation.\n\nConstructors\n\nQGLeith(FT::DataType = Float64; C=FT(1.0), min_N² = FT(1e-20), isopycnal_model=SmallSlopeIsopycnalTensor(), slope_limiter=FluxTapering(1e-2)): Construct a QGLeith object with optional parameters.\n\n\n\n\n\n","category":"type"},{"location":"neverworld/#WenoNeverworld.Parameterizations.Δ²ᶜᶜᶜ-NTuple{4, Any}","page":"API","title":"WenoNeverworld.Parameterizations.Δ²ᶜᶜᶜ","text":"Return the filter width for an Horizontal closure on a general grid.\n\n\n\n\n\n","category":"method"},{"location":"#WenoNeverworld.jl","page":"Home","title":"WenoNeverworld.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for WenoNeverworld.jl","category":"page"}]
}
